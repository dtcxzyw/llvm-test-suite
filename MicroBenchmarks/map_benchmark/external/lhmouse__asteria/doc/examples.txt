### "Hello world!"

```
std.io.putln("hello world!");
```

### Plain Functions

```
func add(x, y) {
  return x + y;
}
std.io.putf("add(1,2) = $1\n", add(1,2));
```

### Functions Taking Variadic Arguments

```
func pargs(a, b, ...) {
  std.io.putf("named argument `a` = $1\n", a);
  std.io.putf("named argument `b` = $1\n", b);

  std.io.putf("variadic argument count = $1\n", __varg());
  for(var i = 0; i != __varg(); ++i)
    std.io.putf("variadic argument [$1] = $2\n", i, __varg(i));
}

std.io.putln("calling `pargs()`...");
pargs();

std.io.putln("calling `pargs(1)`...");
pargs(1);

std.io.putln("calling `pargs(1, true)`...");
pargs(1, true);

std.io.putln("calling `pargs(1, true, 'hello')`...");
pargs(1, true, 'hello');

std.io.putln("calling `pargs(1, true, 'hello', 2.5)`...");
pargs(1, true, 'hello', 2.5);
```

### Function Arguments Passed by Reference

```
func exchange(x, y) {
  var old = x;
  x = y;  // This would throw an exception if `x` was passed by value.
  return old;
}

var sth = 42;
var old = exchange(->sth, "other");
std.io.putf("old = $1\n", old);
std.io.putf("sth = $1\n", sth);
```

### Functions Returning by Reference

```
var sth = 42;

func get() {
  return ->sth;
}

std.io.putf("sth = $1\n", sth);
get() = "other";
std.io.putf("sth = $1\n", sth);
```

### Exception Handling

```
func mul(x, y) {
  return x * y;
}

try {
  mul(0x1p60, 10000);  // This overflows.
}
catch(e) {
  std.io.putf("Caught exception: $1\n", e);
  std.debug.dump(__backtrace);
}
```

### Structured Binding for Arrays

```
func seq3(x) {
  return [
    x + 1,
    x + 2,
    x + 3,
  ];
}

// This declares three variables, which are initialized by the first,
// second and third element of the array returned, respectively.
// Excess variables are initialized to `null`.
var [ a1, a2, a3 ] = seq3(100);

std.io.putf("a1 = $1\n", a1);
std.io.putf("a2 = $1\n", a2);
std.io.putf("a3 = $1\n", a3);
```

### Structured Binding for Objects

```
func access() {
  return {
    result: "success",
    value:  42,
  };
}

// This declares three variables, which are initialized by the
// corresponding value from the object returned.
// Variables whose names do not exist are initialized to `null`.
var { value, result, error } = access();

std.io.putf("value  = $1\n", value);
std.io.putf("result = $1\n", result);
std.io.putf("error  = $1\n", error);

```

### A Complex Example

```
var sth = 10;

func disp(x) {
  switch(x) {
  case 1:
    var sth = "meow";  // This hides the outer `sth`.
  case 2:
    sth = true;  // This attempts to alter the inner `sth`.
                 // If it has not been initialized, an exception is thrown.
  }
}

try {
  disp(2);
}
catch(e) {
  std.io.putf("Caught exception: $1\n", e);
  std.debug.dump(__backtrace);
}
```
