### 101: Hello World

The first program that we compose in almost any programming language is
one that prints 'hello world'. In the Asteria REPL we type:

  ```
  #1:1> std.io.putln("hello world");
  * running 'snippet #1'...
  hello world
  * result #1: void
  ```

This line of code comprises only a single statement, which also comprises
a single expression. The `std.io.putln` part references a value, named
`putln`, of the object (key-value pair container) named `io`, of the
global variable `std`, which is a builtin one. As the name `std` suggests
it denotes the standard library.

The `std.io.putln` function takes a string argument and writes it to the
standard output stream. We can also examine it directly:

  ```
  #2:1> std.io.putln
  * running 'expression #2'...
  * result #2: function [[`std.io.putln(text)` at 'asteria/library/io.cpp:488']];
  ```

### Functions

We can define a function, which takes some or none arguments and returns
a value:

  ```
  #1:1> func add(a, b) { return a + b;  }    \
     2> std.io.putfln("sum = $1", add(1, 2));
  * running 'snippet #1'...
  sum = 3
  * result #1: void
  ```

We defined a function called `add` that took two arguments and returned
the sum of them. The function `std.io.putfln` took a string template that
contained a placeholder `$1` which was replaced by the sum as its second
argument, and printed the result to standard output.

It is not possible for a function to return multiple values. However, we
can compose a function that returns an array of two values:

  ```
  #2:1>  func minmax(x, y) {         \
     2>   if(x < y)                 \
     3>     return [x, y];          \
     4>   else                      \
     5>     return [y, x];          \
     6> }                           \
     7>                             \
     8> var a = minmax(6, 5);       \
     9> std.io.putfln("min = $1, max = $2", a[0], a[1]);
  * running 'snippet #2'...
  min = 5, max = 6
  * result #2: void
  ```

A function can return no value at all, either by explicit `return;` or by
not having a return statement. A call to a function that has returned no
value yields a void reference. It is an error to use a void reference as
a value:

  ```
  #3:1> func novalue() { }       \
     2> std.io.putfln("novalue = $1", novalue());
  * running 'snippet #4'...
  ! error: runtime error: attempt to use the result of a function call which returned no value
  [backtrace frames:
    0) native code at 'asteria/runtime/reference.cpp:56:0': "attempt to use the result of a function call which returned no value"
    1)   expression at 'snippet #4:2:31': ""
    2)   function at 'snippet #4:0:0': "[file scope]"
    -- end of backtrace frames]
  ```

